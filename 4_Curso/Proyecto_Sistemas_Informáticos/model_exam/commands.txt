----------------------- CREAR VENV ---------------------------
### En la carpeta de trabajo, ejecutar
virtualenv venv --python=python3

>>> Copiar y pegar el requirements.txt

### Entrar en el venv
source venv/bin/activate

### Instalar todo lo necesario
pip install -r requirements.txt
--------------------------------------------------------------

----------------------- CREAR APP ----------------------------
### Crear proyecto de django
django-admin.py startproject proyecto

### Ir al directorio del proyecto para crear la aplicacion
cd proyecto

### Crear la aplicacion
python3 manage.py startapp aplicacion

>>> Poner en INSTALLED_APPS (settings.py) la aplicacion creada: 'aplicacion',
--------------------------------------------------------------

----------------------- MODELOS ------------------------------
>>> Modelos

>>> Registrar modelos en admin.py

>>> Crear el 'populate' en el mismo directorio que manage.py

>>> Probar que todo va bien con python3 manage.py runserver

>>> Cambiar DATABASES settings.py

### Hemos hecho cambios en models.py -> hacer migracaciones
python3 manage.py makemigrations aplicacion

### Lanzar migraciones
python3 manage.py migrate

### Crear superusuario
python3 manage.py createsuperuser
alumnodb
alumnodb

### Comprobar que la base de datos de postgresql se encuentra lista
dropdb -U alumnodb -h localhost examen
createdb -U alumnodb -h localhost examen

### Ejecutar script de poblacion
python3 poblar.py
--------------------------------------------------------------

----------------------- HEROKU ------------------------------
>>> Copiar y pegar Procfile (cambiar nombre proyecto) en la carpeta de manage.py

>>> Copiar y pegar runtime.txt en el mismo sitio

>>> Asegurarse que el requirements.txt esta listo en el directorio de manage.py

>>> Cambiar fichero wsgi.py

>>> Crear .gitignore y poner (las que sean necesarias) en el durectorio de manage.py:
*.pyc
staticfiles
uploads

>>> Crear carpeta static con .keep dentro y poner STATIC_ROOT
STATIC_ROOT = os.path.join(BASE_DIR, 'staticHeroku')

### Inicializamos repositorio en la carpeta donde esta Procfile y todo esto
git init

### Add & Commit
git add --all
git commit -m "initial commit"

### Iniciamos sesion Heroku
heroku login

### Crear repo heroku
heroku create

>>> Copiar y pegar direccion (url) en settings.py
CUIDADO CON LA BARRA DEL FINAL
Y TAMPOCO EL HTTS//

### Add & Commit
git add --all
git commit -m "allowed hosts"

### Lo subimos
git push heroku master

>>> Sobreescribir settings.py de ratonGato

### Tipico error de collectstatic (no deberia)
heroku config:set DISABLE_COLLECTSTATIC=1

### Escalar la app a 1, si no esta ya
heroku ps:scale web=1

### Migraciones en heroku
heroku run bash
python manage.py migrate

### Ejecutar 'populate'
heroku run bash
python poblar.py

### Crear superusuario
python manage.py createsuperuser
alumnodb
alumnodb

>>> Comprobar en el admin que todo este bien
--------------------------------------------------------------


------------------------ STATIC ------------------------------
>>> Crear directorio templates en el root
>>> Crear subcarpeta con el nombre de la aplicacion

### Crear fichero urls.py en aplicacion
from django.urls import path
from aplicacion import views

urlpatterns = [
    path('receta', views.receta, name='receta'),
    path('receta/', views.receta, name='receta'),
]


### Poner TEMPLATES_DIR en settings.py
TEMPLATE_DIR = os.path.join(BASE_DIR, "templates")
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR, ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


### Poner lo siguiente en el urls.py en proyecto>proyecto>urls.py
from django.contrib import admin
from django.urls import path
from django.urls import include
from django.conf import settings
from django.conf.urls.static import static

from aplicacion import views

urlpatterns = [
    path('', views.index, name='landing'),
    path('admin/', admin.site.urls),
    path('aplicacion/', include('aplicacion.urls')),
]
urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


### Ejecutar tests (despues de hacerlos claro esta)
export SQLITE=1
python manage.py test aplicacion.tests --keepdb
unset SQLITE
