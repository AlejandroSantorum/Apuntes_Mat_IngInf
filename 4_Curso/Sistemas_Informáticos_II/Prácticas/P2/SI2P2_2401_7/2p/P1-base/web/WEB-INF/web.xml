<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
<!-- Descripción general de la aplicación web-->
    <display-name>Sistemas Informáticos II - Práctica 1</display-name>
    <description>Esta segunda versión de la práctica 1 implementa la funcionalidad de pago con VISA</description>

    <!-- Inicialización de parámetros de contexto que definen constantes
       de tipo String que se usan en la aplicación, lo que se puede
       particularizar por el administrador del sistema que instala la
       aplicación. Los valores que se asignen a estos parámetros se 
       pueden obtener en un servlet o página JSP llamando a:
           
        String value =
               getServletContext().getInitParameter("nombre");
              
       donde "nombre se corresponde con el elemento <param-name>
       de uno de estos parámetros de inicialización.
       
       Se puede definir cualquier número de parámetros de inicialización,
       incluyendo cero parámetros.
    -->
  <!--
    <context-param>
        <param-name>webmaster</param-name>
        <param-value>myaddress@mycompany.com</param-value>
    </context-param>
    -->

    <!-- Definición de cada uno de los Servlet que componen la aplicación
       incluyendo parámetros de inicialización de cada servlet.
       
       Los parámetros de inicialización de servlets se pueden obtener en
       un servlet o página JSP llamando a:
       
             String value =
               getServletConfig().getInitParameter("nombre");

       donde "nombre se corresponde con el elemento <param-name>
       de uno de estos parámetros de inicialización.

        Se puede definir cualquier número de servlets, incluso cero
    -->
    <!-- Definición de filtros que dispone la aplicación. Los filtro se definen
    de manera similar a los servlet. Requieren un nombre y la clase que lo 
    implementa.
    
    Los parámetros de inicialización de un filtro se pueden obtener en llamando a:
       
             String value =
               filterconfig.getInitParameter("nombre");

       donde "nombre se corresponde con el elemento <param-name>
       de uno de estos parámetros de inicialización.      
    -->
    <filter>
        <filter-name>CompruebaSesion</filter-name>
        <filter-class>ssii2.filtros.CompruebaSesion</filter-class>
        <init-param>
            <param-name>rutasexcluidas</param-name>
            <param-value>/pago.html,/testbd.jsp,/comienzapago,/procesapago,/getpagos,/delpagos</param-value>
        </init-param>
    </filter>
    
	
    <!-- Definición de cada uno de las correspondencias entre Filtros 
       y URLs a las que se aplica el filtrado.
       
       El patrón del URL puede contener un * para indicar que cualquier 
       nombre en el URL es válido para acceder al servlet que se indique.
       
       Los filtros se puede aplicar a REQUEST, FORWARD, INCLUDE o ERROR, 
       dependiendo del tipo de petición a la que afecte
    -->
    <filter-mapping>
        <filter-name>CompruebaSesion</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>
    
    <!-- Definición de cada uno de los Servlet que componen la aplicación
       incluyendo parámetros de inicialización de cada servlet.
       
       Los parámetros de inicialización de servlets se pueden obtener en
       un servlet o página JSP llamando a:
       
             String value =
               getServletConfig().getInitParameter("nombre");

       donde "nombre se corresponde con el elemento <param-name>
       de uno de estos parámetros de inicialización.

        Se puede definir cualquier número de servlets, incluso cero
    -->
    <servlet>
        <servlet-name>ComienzaPago</servlet-name>
        <servlet-class>ssii2.controlador.ComienzaPago</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>ProcesaPago</servlet-name>
        <servlet-class>ssii2.controlador.ProcesaPago</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>GetPagos</servlet-name>
        <servlet-class>ssii2.controlador.GetPagos</servlet-class>
    </servlet>	
	<servlet>
        <servlet-name>DelPagos</servlet-name>
        <servlet-class>ssii2.controlador.DelPagos</servlet-class>
    </servlet>	
    
    <!-- Definición de cada uno de las correspondencias entre Servlets 
       y URLs desde los que se accedería a los mismos.
       
       El patrón del URL puede contener un * para indicar que cualquier 
       nombre en el URL es válido para acceder al servlet que se indique.
    -->
    <servlet-mapping>
        <servlet-name>ComienzaPago</servlet-name>
        <url-pattern>/comienzapago</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>ProcesaPago</servlet-name>
        <url-pattern>/procesapago</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>GetPagos</servlet-name>
        <url-pattern>/getpagos</url-pattern>
    </servlet-mapping>	
	<servlet-mapping>
        <servlet-name>DelPagos</servlet-name>
        <url-pattern>/delpagos</url-pattern>
    </servlet-mapping>	
    
    <!-- Define el tiempo de sesión por defecto para la aplicación en
       minutos. Para un servlet o página JSP se puede modificar el
       tiempo para una sesión de manera dinámica usando 
               HttpSession.getMaxInactiveInterval(). 
    -->
    <session-config>
        <session-timeout>
            30
        </session-timeout>
    </session-config>
    
     <!-- Lista de archivos que el servidor entregará por defecto si no se 
          pide ningún archivo concreto 
    -->
    <welcome-file-list>
        <welcome-file>pago.html</welcome-file>
        </welcome-file-list>
    </web-app>
